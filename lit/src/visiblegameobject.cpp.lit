== The visible game object ==
This class represents every object that needs to
be drawn. Note that it's an abstract class and that
it isn't intended to be created directly.

== Constructor ==
-
VisibleGameObject::VisibleGameObject()
{
  _isLoaded = false;
}
-

== Destructor ==
The author of the tutorial has the destructor empty
but it probably shouldn't be since we create an
SFML image and sprite.
-
VisibleGameObject::~VisibleGameObject()
{
}
-

== Load ==
Fail silently (not sure about that) and nuke the path if
it doesn't load properly.
Otherwise, save the path and the image data. Note that we
call SetImage on the sprite because it's already been
instantiated.
-
void VisibleGameObject::Load(std::string filename)
{
  if(!_image.LoadFromFile(filename))
  {
    _filename = "";
    _isLoaded = false;
  } else {
    _filename = filename;
    _sprite.SetImage(_image);
    _isLoaded = true;
  }
}
-

== Draw ==
Only draw the sprite if it's loaded
-
void VisibleGameObject::Draw(sf::RenderWindow& window)
{
  if(_isLoaded)
  {
    window.Draw(_sprite);

    //debug
    /*
    sf::Rect<float> boundingBox = GetBoundingRect();
    sf::Shape debugBox = sf::Shape::Rectangle(
      boundingBox.Left, boundingBox.Top,
      boundingBox.Right, boundingBox.Bottom,
      sf::Color::Blue,
      true,
      sf::Color::Blue
    );
    debugBox.SetOutlineWidth(2);
    debugBox.EnableFill(false);
    window.Draw(debugBox);
    */
  }
}
-

== Update ==
You'll notice we're not delcaring the update method here.
That is because it is a pure virtual method, which means
it has no implementation on the base class, and all
derived classes need to implement it themselves.

== Set position ==
Only set the position if it's loaded
-
void VisibleGameObject::SetPosition(float x, float y)
{
  if(_isLoaded)
  {
    _sprite.SetPosition(x, y);
  }
}
-

== Get position ==
If the object is loaded, return the position of the
object. If it's not loaded, return a default vector.
-
sf::Vector2f VisibleGameObject::GetPosition() const
{
  if(_isLoaded)
  {
    return _sprite.GetPosition();
  }
  return sf::Vector2f();
}
-

== Get sprite ==
-
sf::Sprite& VisibleGameObject::GetSprite()
{
  return _sprite;
}
-

== Get width ==
-
float VisibleGameObject::GetWidth() const
{
  if(_isLoaded)
  {
    return _sprite.GetSize().x;
  }
  return 0.f;
}
-

== Get height ==
-
float VisibleGameObject::GetHeight() const
{
  if(_isLoaded)
  {
    return _sprite.GetSize().y;
  }
  return 0.f;
}
-

== Get bounding rectangle ==
A bounding rectangle is a rectangle that represents
the edges of a sprite. It is used in a fast way to
calculate collisions that disregards the objects
actual shape.

The reason we devide the size by 2 is because we set
the objects center to be the center of the sprite,
not the top left which is the default.
-
sf::Rect<float> VisibleGameObject::GetBoundingRect() const
{
  sf::Vector2f size = _sprite.GetSize();
  sf::Vector2f pos = _sprite.GetPosition();

  return sf::Rect<float>(
    pos.x - size.x / 2,
    pos.y - size.y / 2,
    pos.x + size.x / 2,
    pos.y + size.y / 2
  );
}
-

== Is loaded ==
-
bool VisibleGameObject::IsLoaded() const
{
  return _isLoaded;
}
-

== Includes ==
-
#include "visiblegameobject.hpp"
-

== Formatted class ==
Just a wrapper so that we can format the class nicely.
This compensates for a lack in Literati, but until I
get it fixed, this will do nicely.
-
Includes.

Constructor.

Destructor.

Load.

Draw.

Set position.

Get position.

Get width.

Get height.

Get bounding rectangle.

Get sprite.

Is loaded.
-

== @visiblegameobject.cpp ==
Formatted class.