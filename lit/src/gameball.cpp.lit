== The game ball ==
This class represents the game ball. It is responsible 
for handling it's own updates (eventually) and it's
own asset loading and rendering.

== Constructor ==
Start the game with the ball flying at a random angle.
-
GameBall::GameBall() :
  _velocity(230.f),
  _elapsedTimeSinceStart(0.f),
  _player1Score(0),
  _aiScore(0)
{
  Load("assets/ball.png");
  assert(IsLoaded());

  GetSprite().SetCenter(15, 15);

  sf::Randomizer::SetSeed(std::clock());
  _angle = (float)sf::Randomizer::Random(0, 360);
}
-

== Running the game ==
Before we get into the logic of running the game, which
seems to live mostly in the ball, we should cover how
the component vector for velocity is calculated.

Before that, going back to all the logic living in the
ball, that doesn't seem right.
The game itself should contain rules about how the 
various objects interact. If the ball is responsible
for all of the games logic, then the ball needs to know
about the paddle, and the game requires a ball.

If we wanted to switch the ball with a hamster, we'd
need to duplicate all the code here, instead of
dropping it in as a ball replacement. This is a silly
and contrived example, but still.

This might be a good candidate for an MVC refactor of
the game.

== Get x linear velocity ==
-
float GameBall::LinearVelocityX(float angle)
{
  angle = fmodf(angle - 90.f, 360.f);
  return (float)cos(angle * ( 3.1415926 / 180.f ));
}
-

== Get y linear velocity ==
-
float GameBall::LinearVelocityY(float angle)
{
  angle = fmodf(angle -= 90.f, 360.f);
  return (float)sin(angle * (3.1415926 / 180.f ));
}
-

== Get player 1 score ==
-
int GameBall::GetPlayer1Score()
{
  return _player1Score;
}
-

== Get AI score ==
-
int GameBall::GetAIScore()
{
  return _aiScore;
}
-

== Update ==
Here we have all the logic for running the game ball
during a time slice.

The ball will bounce around the game play area, and
the playeres can hit the ball to each other.

The ball encapsulates the logic of how it bounces off
paddles and the walls, and what those angles and
velocities look like.
-
void GameBall::Update(float elapsedTime)
{
  _elapsedTimeSinceStart += elapsedTime;

  Delay game start.

  Calculate move distance.

  sf::Vector2f pos = GetPosition();
  float width = GetWidth();
  float height = GetHeight();

  Collide with the walls.

  Interact with player paddle.

  Reset ball if player misses.

  Move the ball.
}
-

== Delay game start ==
Don't start the game until 3 seconds have passed.
We should probably display some kind of timeout on
the screen for this.
-
if(_elapsedTimeSinceStart < 3.f)
{
  return;
}
-

== Calculate move distance ==
Move the ball by it's component velocity individually.
Probably easier than vector math, but we can
refactor this to use vector math.
-
float distance = _velocity * elapsedTime;
float moveX = LinearVelocityX(_angle) * distance;
float moveY = LinearVelocityY(_angle) * distance;
-

== Collide with the walls ==
Calculate the new velocity/bearing of the ball after a
collision with the wall, if we have indeed collided
with the wall.

Note that this isn't a simple reflection, we do some
correcting to ensure we don't end up simply bouncing
from edge to edge

Also, for some reason, we're not using the bounding box
of the ball, and the tutorial has us check if we will 
collide AFTER the move, and then change angle based on
that, which I think is a little silly.
-
if(pos.x - width / 2 <= 0 ||
   pos.x + width / 2 >= Game::SCREEN_WIDTH)
{
  _angle = 360.f - _angle;

  // set the ball at the edge of the screen
  if(pos.x - width / 2 <= 0)
  {
    SetPosition(width / 2, pos.y);
  }
  else if(pos.x + width / 2 >= Game::SCREEN_WIDTH)
  {
    SetPosition(Game::SCREEN_WIDTH - width / 2, pos.y);
  }

  // correct for edge to edge bounching
  if(_angle > 260.f && _angle < 280.f ||
     _angle > 80.f && _angle < 100.f)
  {
    _angle += 20.f;
  }
  moveX = -moveX;

  ServiceLocator::GetAudio()->PlaySound("assets/wall-hit.wav");
}
-

== Interact with player paddle ==
Check to see if player successfully hit the ball.
If so, calculate the reutnr velocity and andlge based
on the velocity of the paddle, and how the ball was
struck.
Allows players to affect the ball more than just being
a mobile wall.

Note, in this snippet of code, AGAIN we call into the
game to get an object that should be dependency injected.
Holy moly.
-
sf::Rect<float> ballBoundingBox = GetBoundingRect();
std::vector<std::string> players;
players.push_back("Paddle1");
players.push_back("Paddle2");
for(unsigned int i = 0; i < players.size(); i++)
{
  Paddle* player = dynamic_cast<Paddle*>(Game::GetGameObjectManager().Get(players[i]));
  assert(NULL != player);

  sf::Rect<float> playerBoundingBox = player->GetBoundingRect();

  if(playerBoundingBox.Intersects(ballBoundingBox))
  {
    moveY = -moveY;

    Determine if the ball is at the top of bottom of screen.

    Adjust ball angle by player velocity.

    Adjust ball angle if player hit ball with side of paddle.

    Fix ball position.

    _velocity += 5.f;

    ServiceLocator::GetAudio()->PlaySound("assets/paddle-hit.wav");
  }
}
-

== Determine if the ball is at the top of bottom of screen ==
Because we have a loop, we need to ensure that we have the
correct paddle selected for our ball's behavior.

You don't want the ball interacting with the paddle at the
bottom of the screen if it's at the top of the screen,
and visa versa.
-
bool atTop = true;
bool atBottom = false;
if (pos.y > Game::SCREEN_HEIGHT / 2)
{
  atTop = !atTop;
  atBottom = !atBottom;
}
-

== Adjust ball angle by player velocity ==
If the player is moving when the ball is stuck, increase
the angle by 20 degrees
-
float playerVelocity = player->GetVelocity();
if (playerVelocity < 0)
{
  _angle = fmodf(_angle - 20.f, 360.f);
}
if (playerVelocity > 0)
{
  _angle = fmodf(_angle + 20.f, 360.f);
}
-

== Adjust ball angle if player hit ball with side of paddle ==
If the player hits the ball with the side of their paddle, we
need to reflect the ball differently, with a chance the ball
will bounce behind the players paddle and make them lose
-
bool struckLeft = false;
bool struckRight = false;

if(pos.x <= playerBoundingBox.Left ||
   pos.x >= playerBoundingBox.Right)
{
  _angle = -fmodf(_angle - 180.f, 360.f);

  // value we want to compare - value to compare to < tolerance
  int tolerance = 5;
  if(pos.x + (width / 2) - playerBoundingBox.Left < tolerance)
  {
    struckLeft = true;
    if (atTop)
    {
      _angle = 315.f;
    }
    else
    {
      _angle = 225.f;
    }
    
  }
  if (pos.x - (width / 2) - playerBoundingBox.Right > -tolerance)
  {
    struckRight = true;
    if (atTop)
    {
      _angle = 45.f;
    }
    else
    {
      _angle = 135.f;
    }
  }
}
else
{
  _angle = fmodf((360.f - (_angle - 180.f)), 360.f);
}
-

== Fix ball position ==
If the ball is struck on the top, but it's overlapping the
paddle, move it to the top of the paddle.
However, if we hit the ball on one of the sides, then
move it to the side of the paddle.
-
if (atBottom && !struckLeft && !struckRight && ballBoundingBox.Bottom > playerBoundingBox.Top)
{
  SetPosition(pos.x, playerBoundingBox.Top - width / 2);
} 
if (atTop && !struckLeft && !struckRight && ballBoundingBox.Top < playerBoundingBox.Bottom)
{
  SetPosition(pos.x, playerBoundingBox.Bottom + width / 2);
}
if(struckLeft && ballBoundingBox.Left > playerBoundingBox.Right)
{
  SetPosition(playerBoundingBox.Left - width / 2, pos.y);
}
if (struckRight && ballBoundingBox.Left < playerBoundingBox.Right)
{
  SetPosition(playerBoundingBox.Right + width / 2, pos.y);
}
-

== Reset ball if player misses ==
If the player misses the ball, reset it.
Increment the score for the player oppose the
paddle that it was closest to the ball.

Refactor out the reference to the Game class.
-
if(pos.y + height / 2 >= Game::SCREEN_HEIGHT ||
   pos.y - height / 2 <= 0)
{
  Increment score.

  GetSprite().SetPosition(Game::SCREEN_WIDTH / 2, Game::SCREEN_HEIGHT / 2);
  _angle = (float)sf::Randomizer::Random(0, 360);
  _velocity = 220.f;
  _elapsedTimeSinceStart = 0.f;
}
-

== Increment score ==
If the ball passes by the AI character, increment
the player 1 score. If the ball passes by the player
1 paddle, increment the AI score.
-
if(pos.y + height / 2 <= 0)
{
  // Increment player 1 score
  _player1Score++;
}
else
{
  // Increment AI score
  _aiScore++;
}
-

== Move the ball ==
Finally, move the ball.
-
GetSprite().Move(moveX, moveY);
-

== Destructor ==
-
GameBall::~GameBall()
{
}
-

== Includes ==
-
#include <math.h>
#include <iostream>
#include <string>
#include "gameball.hpp"
#include "game.hpp"
#include "playerpaddle.hpp"
#include "aipaddle.hpp"
#include "servicelocator.hpp"
-

== @gameball.cpp ==
Includes.
Constructor.
Destructor.
Update.
Get x linear velocity.
Get y linear velocity.
Get player 1 score.
Get AI score.