== The main menu ==
This class represents the main menu. It will draw
itself and handle it's own input.

== Draw ==
-
MainMenu::MenuResult MainMenu::Show(sf::RenderWindow& window)
{
  Setup play button clickable region.

  Setup exit button clickable region.

  Add menu items to menu item list.

  Init the screen.

  Draw menu buttons.

  Draw button labels.

  window.Display();

  return GetMenuResponse(window);
}
-

== Load font ==
Again, we need to load the font in to render text.
We will be showing this menu frequently, so we should
hold a reference to the font.
-
_font = new sf::Font();
if (!_font->LoadFromFile("assets/visitor.ttf"))
{
  // handle the error
}
-

== Setup play button clickable region ==
Because the image file contains the visual
representation of the menu item, each menu item
is a logical representation, a rectangle area that
the user clicks on. Depending on where the user
clicked, we will activate a different menu item.
-
MenuItem playButton;
playButton.rect.Top = 768 / 2 - 100;
playButton.rect.Bottom = 768 / 2 ;
playButton.rect.Left = 1024 / 3;
playButton.rect.Right = 1024 / 3 * 2;
playButton.action = Play;
-

== Setup exit button clickable region ==
-
MenuItem exitButton;
exitButton.rect.Top = 768 / 2;
exitButton.rect.Bottom = 768 / 2 + 100;
exitButton.rect.Left = 1024 / 3;
exitButton.rect.Right = 1024 / 3 * 2;
exitButton.action = Exit;
-

== Add menu items to menu item list ==
-
_menuItems.push_back(playButton);
_menuItems.push_back(exitButton);
-

== Init the screen ==
Draw the screen black so that we can draw our text in
white
-
window.Clear(sf::Color(0,0,0));
-

== Draw menu buttons ==
The menu can be implemented with plain old SFML text
and primitives, like rectangles drawn with no fill.
This will prevent us hitting the disk just to fetch
something we can just draw anyway.
-
sf::Shape playRect = sf::Shape::Rectangle(
  playButton.rect.Left * 1.f, 
  playButton.rect.Top * 1.f, 
  playButton.rect.Right * 1.f, 
  playButton.rect.Bottom * 1.f,
  sf::Color::White, true, sf::Color::White
);
playRect.EnableFill(false);
window.Draw(playRect);

sf::Shape exitRect = sf::Shape::Rectangle(
  exitButton.rect.Left * 1.f, 
  exitButton.rect.Top * 1.f, 
  exitButton.rect.Right * 1.f, 
  exitButton.rect.Bottom * 1.f,
  sf::Color::White, true, sf::Color::White
);
exitRect.EnableFill(false);
window.Draw(exitRect);
-

== Draw button labels ==
Draw the labels for each of the buttons above
-
sf::String playLabel = sf::String("Start game", *_font);
playLabel.SetPosition(1024 / 2 - 90, playButton.rect.Top + 30);
window.Draw(playLabel);

sf::String exitLabel = sf::String("Exit game", *_font);
exitLabel.SetPosition(1024 / 2 - 75, exitButton.rect.Top + 30);
window.Draw(exitLabel);
-

== Handle input ==
In order to handle the input for this menu, we
need to do two things:
# Poll the window for events
# Deal with mouse click events
-
Poll the window for events.

Deal with mouse click events.
-

== Poll the window for events ==
Poll the window for events, and pass click events
through to HandleClick

Implementation note: we can use a switch statement
if we need to process a lot of events. However,
with only two, an if statement is OK.
-
MainMenu::MenuResult MainMenu::GetMenuResponse(sf::RenderWindow& window)
{
  sf::Event menuEvent;
  while(true)
  {
    while(window.GetEvent(menuEvent))
    {
      if (menuEvent.Type == sf::Event::MouseButtonPressed)
      {
        return HandleClick(menuEvent.MouseButton.X, menuEvent.MouseButton.Y);
      }
      if (menuEvent.Type == sf::Event::Closed)
      {
        return Exit;
      }
    }
  } 
}
-

== Deal with mouse click events ==
When a mouse click comes in, we need to see where
the click happened. We check each menu item to see
if the click happened in it's bounds - if so, that
menu item was clicked and we should return it's
action.

Assume origin is top right in SFML?
-
MainMenu::MenuResult MainMenu::HandleClick(int x, int y)
{
  std::list<MenuItem>::iterator it;
  for (it = _menuItems.begin(); it != _menuItems.end(); it++)
  {
    sf::Rect<int> menuItemRect = (*it).rect;
    if (menuItemRect.Bottom > y && menuItemRect.Top < y &&
        menuItemRect.Left < x && menuItemRect.Right > x) 
    {
      Stop the music if its playing.
      return (*it).action;
    }
  }
  return Nothing;
}
-

== Stop the music if its playing ==
-
if(ServiceLocator::GetAudio()->IsSongPlaying())
{
  ServiceLocator::GetAudio()->StopAllSounds(); 
}
-

== Construct ==
-
MainMenu::MainMenu()
{
  Load font.
}
-

== Destruct ==
-
MainMenu::~MainMenu()
{
  delete _font;
}
-

== Includes ==
-
#include "mainmenu.hpp"
#include "servicelocator.hpp"
-

== @mainmenu.cpp ==
Includes.

Construct.

Destruct.

Draw.

Handle input. 