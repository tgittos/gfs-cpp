== AI paddle ==
This class represents the AI paddle that the player
will play againce. It is responsible for both running
it's actions during the game, and for rendering itself
to the screen. Ideally, these two functions should be
abstracted into different classes. Perhaps that can
be a refactor goal.

== Constructor ==
Initialize the velocity and max velocity of the AI
paddle. Load the graphic and reset the center to be
the center of the png. 
-
AIPaddle::AIPaddle()
{
  _paddleTargetX = Game::SCREEN_WIDTH / 2;
}
-

== Update ==
The AI paddle follows the ball around and attempts to
place itself where it needs to be to hit the ball.

It looks like the author is trying to build in a flaw
by making the paddle move faster in one direction than
the other.

I don't think this is the optimal way to do the AI,
because it's not fair - the paddle has direct access
to it's velocity, and the player does not. The player
can only press a button to move the paddle.

The AI should interface with it's paddle in the same
way. There should be a paddle interface the AI can
interact with (ideally the same interface the control
system interacts with) so that the player doesn't feel
like the AI cheats.

Lets mark this for refactoring in future sessions. For
now, I will not program the flaw the original author
programmed in.
-
void AIPaddle::Update(float elapsedTime)
{
  Get the ball position.

  Track ball position and set target.

  Set velocity based on target.

  Clamp velocity by max velocity.

  Bounce off the walls.

  GetSprite().Move(_velocity * elapsedTime, 0);
}
-

== Get the ball position ==
-
const GameBall* gameBall = static_cast<GameBall*>(Game::GetGameObjectManager().Get("Ball"));
sf::Vector2f ballPosition = gameBall->GetPosition();
-

== Track ball position and set target ==
Track the ball's position over time and see if the
AI paddle can guess where the paddle is going to be.

To do that, we need to derive the equation of the
balls trajectory, and then predict where the ball
will be.
-
if (_lastBallPos.x == 0 && _lastBallPos.y == 0)
{
  _lastBallPos = ballPosition; 
}
if (_lastBallPos != ballPosition && (ballPosition.y - _lastBallPos.y) < 0)
{
  float m = (ballPosition.y - _lastBallPos.y) / (ballPosition.x - _lastBallPos.x);
  float c = ballPosition.y - m * ballPosition.x;

  Calculate paddle target based off of vector.
}
_lastBallPos = ballPosition;
-

== Calculate paddle target based off of vector ==
Once we know how the ball is behaving, we can figure
out where it's going to be.

If it's way off screen, try to calculate the target
after a single bounce.
-
_paddleTargetX = (GetPosition().y - c) / m;
if (_paddleTargetX < 0 || _paddleTargetX > Game::SCREEN_WIDTH)
{
  Recalculate ball position after bounce.
}
-

== Recalculate ball position after bounce ==
If the ball is going to bounce, take the existing
target and mirror it back into the field.
If that's off screen as well, don't do anything.
-
if (_paddleTargetX < 0)
{
  _paddleTargetX = -_paddleTargetX;
}
else
{
  _paddleTargetX = Game::SCREEN_WIDTH - (_paddleTargetX - Game::SCREEN_WIDTH);
}
if (_paddleTargetX < 0 || _paddleTargetX > Game::SCREEN_WIDTH)
{
  _paddleTargetX = GetPosition().x;
}
-

== Calculate paddle target based off of ball position ==
Paddle follows the ball
-
float threshold = 150.f;
if (abs(_paddleTargetX - ballPosition.x) > threshold)
{
  _paddleTargetX = ballPosition.x; 
}
-

== Set velocity based on target ==
Stop the paddle if it's right under the ball.
Note this AI doesn't take the y position of the
ball into account.

I'm not sure if that would significantly improve
it's performance, but it's something to keep in
mind.
-
float acceleration = 4.f;
if(GetPosition().x < _paddleTargetX)
{
  if (_velocity < 0.f)
  {
    _velocity = 0.f;
  }
  _velocity += acceleration;
}
else if (GetPosition().x > _paddleTargetX)
{
  if (_velocity > 0.f)
  {
    _velocity = 0.f;
  }
  _velocity -= acceleration;
}
else
{
  _velocity = 0.f;
}
-

== Clamp velocity by max velocity ==
-
if (_velocity > _maxVelocity)
{
  _velocity = _maxVelocity;
}
if (_velocity < -_maxVelocity)
{
  _velocity = -_maxVelocity;
}
-

== Bounce off the walls ==
This assigns position to a variable, which we could
have used all over this method.

Refactor.

Also this shares some common code with the player
paddle, such as bouncing off of walls.

Perhaps the should be a base paddle class that
has some of this common code in it.
-
sf::Vector2f pos = GetPosition();
sf::Vector2f spriteSize = GetSprite().GetSize();
if(pos.x <= spriteSize.x / 2)
{
  if(_velocity < 0)
  {
    _velocity = -_velocity;
  }
}
if(pos.x >= (Game::SCREEN_WIDTH - spriteSize.x / 2))
{
  if(_velocity > 0)
  {
    _velocity = -_velocity;
  }
}
-

== Destructor ==
-
AIPaddle::~AIPaddle()
{
}
-

== Includes ==
-
#include <math.h>
#include <iostream>
#include "aipaddle.hpp"
#include "game.hpp"
#include "gameball.hpp"
-

== Wrapper ==
-
Includes.

Constructor.

Destructor.

Update.
-

== @aipaddle.cpp ==
Wrapper.