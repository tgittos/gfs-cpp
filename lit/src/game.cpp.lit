== Game class ==
This is the game class

== Initial state ==
Before we do anything, the state of the game is uninitialized.
We also need to declare the window variable if we want to
be able to use it later.
-
Game::GameState Game::_gameState = Uninitialized;
sf::RenderWindow Game::_mainWindow;
GameObjectManager Game::_gameObjectManager;
GUI Game::_gui;
sf::Rect<int> Game::_gameField(0, 50, SCREEN_WIDTH, SCREEN_HEIGHT - 25);
int Game::_scores[2] = {0, 0};
-

== Start the game ==
To start the game, all we have to do is call the start method.
The start method will set up the game, and then call the loop.
First, check that the game is uninitialized. If it's not, it's
likely the method was called by mistake. Do nothing.
Next, create the main window and store the reference to it.
Currently it's hardcoded to be a 1074x768 window with 32 bit
depth.
Set the game state to playing, and then as long as we're not
exiting, run the game loop.
Once we've exited the game loop, close the window.
-
void Game::Start(void)
{
  if(_gameState != Uninitialized)
    return;

  _mainWindow.Create(sf::VideoMode(SCREEN_WIDTH, SCREEN_HEIGHT, 32),"Pang!");

  Set up audio system.

  Set up player 1.

  Set up AI player.

  Set up the ball.

  _gameState = Game::ShowingSplash;
  
  while(!IsExiting())
  {
    GameLoop();
  }

  _mainWindow.Close();
}
-

== Set up audio system ==
Instantiate a new SFML sound provider to provider sound, and
register it for use elsewhere in the game.
Start playing the soundtrack, and loop it.
-
SFMLSoundProvider soundProvider;
ServiceLocator::RegisterAudioService(&soundProvider);
-

== Set up player 1 ==
When we start the game, we need to create player one, who is
a paddle.

After we create the first player, we add it to the object
manager.
-
PlayerPaddle *player1 = new PlayerPaddle();
player1->SetPosition(SCREEN_WIDTH / 2, _gameField.Bottom - 40);
_gameObjectManager.Add("Paddle1", player1);
-

== Set up AI player ==
We also need to create the AI player.
-
AIPaddle* player2 = new AIPaddle();
player2->SetPosition(SCREEN_WIDTH / 2, _gameField.Top + 40);
_gameObjectManager.Add("Paddle2", player2);
-

== Set up the ball ==
We also need to set up a ball, which the players play with.
-
GameBall *ball = new GameBall();
ball->SetPosition(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2 - 15);
_gameObjectManager.Add("Ball", ball);
-

== Get window ==
Get a reference to the render window from anywhere in the
game.
This introduces high coupling, and needs to be refactored
out.
-
sf::RenderWindow& Game::GetWindow()
{
  return _mainWindow;
}
-

== Get input ==
Like above, introduces a high amount of coupling and needs
to be refactored out.
-
const sf::Input& Game::GetInput()
{
  return _mainWindow.GetInput();
}
-

== Get object manager ==
Like above, introduces a high amount of coupling and needs
to be refactored out.
-
GameObjectManager& Game::GetGameObjectManager()
{
  return _gameObjectManager;
}
-

== Get playing field ==
Get the section of the screen that belongs to the game,
rather than the UI.
-
const sf::Rect<int> Game::GetGameField()
{
  return _gameField;
}
-

== Get game score ==
-
int* Game::GetScore()
{
  return _scores;
}
-

== Increment player 1 score ==
This and the player 2 method are both called from within
the game ball. The game ball knows who scored, so it will
tell the game, and the game will monitor the scores
and put the game in the game over state when someone
scores 15 points.
-
void Game::Player1Scored()
{
  _scores[0]++;
  if (WINNING_SCORE == _scores[0])
  {
    _gameState = Game::GameOver;
  }
}
-

== Increment player 2 score ==
-
void Game::AIScored()
{
  _scores[1]++;
  if (WINNING_SCORE == _scores[1])
  {
    _gameState = Game::GameOver;
  }
}
-

== Method to check if exiting ==
-
bool Game::IsExiting()
{
  if(_gameState == Game::Exiting) 
    return true;
  else 
    return false;
}
-

== Method to show the splash screen ==
-
void Game::ShowSplashScreen()
{
  SplashScreen splashScreen;
  splashScreen.Show(_mainWindow);
 _gameState = Game::ShowingMenu;
}
-

== Method to show the menu ==
Remember that the main menu has a poller in it that
polls the SFML window. The call to mainMenu.show
won't return until the user has made a selection.
This will block all other actions in the main menu.

If you wanted to do animation in the background, or
in the menu itself, you'd need to include that in the
polling loop, or find some other way to poll.
-
void Game::ShowMenu()
{
  MainMenu mainMenu;
  MainMenu::MenuResult result = mainMenu.Show(_mainWindow);
  switch(result)
  {
  case MainMenu::Exit:
     _gameState = Game::Exiting;
     break;
   case MainMenu::Play:
    ResetGame();
     _gameState = Game::Playing;
     break;
  }
}
-

== Method to show the game over screen ==
-
void Game::ShowGameOverScreen()
{
  GameEndScreen gameEndScreen;
  if (_scores[0] > _scores[1])
  {
    gameEndScreen.ShowWin(_mainWindow);
  }
  else 
  {
    gameEndScreen.ShowLose(_mainWindow);
  }
  _gameState = Game::ShowingMenu;
}
-

== Reset the game ==
Set the scores to 0.
-
void Game::ResetGame()
{
  _scores[0] = 0;
  _scores[1] = 0;
}
-

== The game loop ==
The game loop is where all of the action happens. It is run
as often as possible, while we're not exiting the app. 
We poll SFML for events, processing events as they come in.
We handle the SFML event differently, depending on what
state weire in.
When the state is playing, we set the state to exiting when we 
recieve that event, which will stop running the game loop and 
exit the application.
If we don't recieve that event, and if the game is in the
Playing state, we simply clear the window red and render that.
-
void Game::GameLoop()
{
  sf::Event currentEvent;
  _mainWindow.GetEvent(currentEvent);
  
  switch(_gameState)
  {
    case Game::ShowingSplash:
      {
        ShowSplashScreen();
        break;
      }
    case Game::ShowingMenu:
      {
        ShowMenu();
        break;
      }
    case Game::Playing:
      {
        Render the game.
      
        Handle game input events.

        break;
      }
    case Game::GameOver:
      {
        ShowGameOverScreen();
        break;
      }
  }
}
-

== Render the game ==
Render the game!
-
_mainWindow.Clear(sf::Color(0,0,0));
_gameObjectManager.UpdateAll();
_gameObjectManager.DrawAll(_mainWindow);
_gui.Draw(_mainWindow);
_mainWindow.Display();
-

== Handle game input events ==
Handle input events while we're playing the game.
We handle quitting the game, and escaping to the menu.
-
if(currentEvent.Type == sf::Event::Closed)
{
  _gameState = Game::Exiting;
}
if(currentEvent.Type == sf::Event::KeyPressed)
{
  if(sf::Key::Escape == currentEvent.Key.Code)
  {
    ShowMenu();
  }
}
-

== Includes ==
-
#include "game.hpp"
#include "splashscreen.hpp"
#include "mainmenu.hpp"
#include "playerpaddle.hpp"
#include "aipaddle.hpp"
#include "gameball.hpp"
#include "servicelocator.hpp"
#include "sfmlsoundprovider.hpp"
-

== @game.cpp ==
Includes.
Start the game.
Get window.
Get input.
Get object manager.
Get playing field.
Get game score.
Increment player 1 score.
Increment player 2 score.
Method to check if exiting.
Method to show the splash screen.
Method to show the menu.
Method to show the game over screen.
Reset the game.
The game loop.
Initial state.