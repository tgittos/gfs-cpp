== The service locator header ==
The service locator class is a service locator, a
design pattern that helps swap out implementations
of a predefined contract.

Right now, we only provide access to the audio
service through the IAudioProvider interface, however
we can add other providers for other interfaces,
like graphics later on down the track.

== The class ==
This is a static class. Right now, with only one provider
it's kind of a glorified global variable. However, with
multiple services, it becomes more useful.
-
class ServiceLocator
{
public:
  Get audio.

  Register audio service.

private:
  static IAudioProvider* _audioProvider;
};
-

== Get audio ==
Return the currently registered audio implementation
-
static IAudioProvider* GetAudio() { return _audioProvider; } const
-

== Register audio service ==
Set the current audio implementation
-
static void RegisterAudioService(IAudioProvider *provider)
{
  _audioProvider = provider;
}
-

== Includes ==
-
#include "IAudioProvider.hpp"
-

== Include guard ==
-
#ifndef SERVICE_LOCATOR_H
#define SERVICE_LOCATOR_H

Includes.

The class.

#endif
-

== @servicelocator.hpp ==
Include guard.