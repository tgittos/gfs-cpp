== Game ball class header ==
The class that represents the ball in the game.
Eventually we will be animating this based on the
rules of the game, but for now, we just load in
the graphical asset.

== Update ==
We need to implement update when inheriting from
VisibleGameObject.
Eventually this will do stuff, but right now, it
wont.
-
void Update(float elaspedTime);
-

== Get x linear velocity ==
Given the bearing of the ball, and it's velocity,
find out what the x component of that velocity
is
-
float LinearVelocityX(float angle);
- 

== Get y linear velocity ==
Same as x linear velocity, but on the y component.
-
float LinearVelocityY(float angle);
-

== Get player 1 score ==
-
int GetPlayer1Score();
-

== Get AI score ==
-
int GetAIScore();
-

== Private variables ==
Velocity, angle (bearing) and time elapsed since
start (of game?).
Player 1 score and AI score.
-
float _velocity;
float _angle;
float _elapsedTimeSinceStart;
int _player1Score;
int _aiScore;
-

== The class ==
-
class GameBall :
  public VisibleGameObject
{
public:
  GameBall();
  virtual ~GameBall();

  Get player 1 score.
  Get AI score.

  Update.

private:
  Private variables.

  Get x linear velocity.
  Get y linear velocity.
};
-

== Includes ==
-
#include "visiblegameobject.hpp"
-

== Include guard ==
-
#ifndef GAME_BALL_H
#define GAME_BALL_H

Includes.

The class.

#endif
-

== @gameball.hpp ==
Include guard.