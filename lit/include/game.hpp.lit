== Game class header ==
This header file gives a broad overview of the features
of the game class.

The first thing to note is that this is a static class.
This is due to the need for a single interface to the
game used in the bootstrapping process.

== State enumeration ==
Pang is a state driven game, meaning that the game can
only be in a single state at a given time, with the
available states in the enumeration.
-
enum GameState { 
  Uninitialized, 
  ShowingSplash, 
  Paused, 
  ShowingMenu, 
  Playing, 
  Exiting 
};
-

== Game state variable ==
For Pang to be state driven, we need to be able to hold
the current state of the app
-
static GameState _gameState;
-

== Window reference variable ==
In addition to the game state variable, we need to hold
a reference to the SFML window
-
static sf::RenderWindow _mainWindow;
-

== Player paddle variable ==
We need to store a reference to the players paddle, so
the game can issue commands to it fomr the event polling
loop.
-
static PlayerPaddle _player1;
-

== Start game method ==
To that end, there is only a single public method, used
to start the game. The game itself will handle all
interactions after that, and all memory management.
-
static void Start();
-

== Exit poller method ==
This method is used inside the class to determine if the
app has been called to shut down.
-
static bool IsExiting();
-

== Show splash screen method ==
-
static void ShowSplashScreen();
-

== Show menu method ==
-
static void ShowMenu();
-

== Game loop method ==
Start the game loop.
-
static void GameLoop();
-

== The class header ==
-
class Game
{

public:
  Start game method.

private:
  State enumeration.
  
  Game state variable.
  Window reference variable.
  Player paddle variable.

  Exit poller method.
  Game loop method.
  Show splash screen method.
  Show menu method.

};
-

== Includes ==
So far all the application does is open a window and
clear it to a red color. So all we need are the window
and graphics SFML libraries.
-
#include "SFML/Window.hpp"
#include "SFML/Graphics.hpp"
#include "playerpaddle.hpp"
-

== Include guard ==
-
#ifndef GAME_H
#define GAME_H

Includes.

The class header.

#endif
-

== @game.hpp ==
Include guard.